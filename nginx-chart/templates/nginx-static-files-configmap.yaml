apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-static-files
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>NGINX Health Metrics</title>
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
      <style>
        body {
          font-family: 'Arial', sans-serif;
          background-color: #121212;
          color: #ffffff;
          text-align: center;
          margin: 0;
          padding: 0;
        }
        h1, h2 {
          color: #4FC3F7;
          margin-top: 20px;
        }
        .chart-container {
          width: 80%;
          max-width: 900px;
          margin: 20px auto;
          padding: 30px;
          background-color: #1e1e1e;
          border-radius: 10px;
          box-shadow: 0px 0px 20px rgba(255, 255, 255, 0.3);
        }
      </style>
    </head>
    <body>
      <h1>NGINX Health Metrics</h1>
      <div class="chart-container">
        <canvas id="nginxMetricsChart"></canvas>
      </div>

      <script>
        async function fetchPrometheusData() {
          const prometheusUrl = 'http://localhost:9090/api/v1/query';
          
          const queries = {
            "total_requests": 'nginx_http_requests_total{job="nginx-exporter"}',
            "4xx_requests": 'nginx_http_requests_total{status=~"4.*", job="nginx-exporter"}',
            "5xx_requests": 'nginx_http_requests_total{status=~"5.*", job="nginx-exporter"}',
            "active_connections": 'nginx_connections_active{job="nginx-exporter"}',
            "bytes_sent": 'nginx_http_bytes_sent_total{job="nginx-exporter"}',
            "nginx_up": 'up{job="nginx-exporter"}',
            "response_time": 'avg(nginx_http_request_duration_seconds_sum{job="nginx-exporter"}) by (instance)'
          };

          try {
            const responses = await Promise.all(Object.values(queries).map(query =>
              fetch(`${prometheusUrl}?query=${encodeURIComponent(query)}`).then(res => res.json())
            ));

            // Log the responses for debugging
            console.log('Prometheus responses:', responses);

            // Return the values if the structure is correct
            return responses.map(res => {
              if (res.status === 'success' && res.data.result.length > 0) {
                return res.data.result[0].value[1];
              } else {
                console.error('Error: Invalid data or empty result');
                return 'N/A'; // Fallback in case of error
              }
            });
          } catch (error) {
            console.error('Error fetching Prometheus data:', error);
            return ['N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']; // Fallback if fetch fails
          }
        }

        async function updateChart() {
          const [totalRequests, fourxxRequests, fivexxRequests, activeConnections, bytesSent, nginxUp, responseTime] = await fetchPrometheusData();

          console.log('Fetched Data:', totalRequests, fourxxRequests, fivexxRequests, activeConnections, bytesSent, nginxUp, responseTime);

          myChart.data.datasets[0].data = [
            parseFloat(totalRequests),
            parseFloat(fourxxRequests) + parseFloat(fivexxRequests), // Sum of 4xx and 5xx errors
            parseFloat(activeConnections),
            parseFloat(bytesSent),
            parseFloat(nginxUp),
            parseFloat(responseTime)
          ];
          myChart.update();
        }

        const ctx = document.getElementById('nginxMetricsChart').getContext('2d');
        const myChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: ['Total Requests', 'Total Errors (4xx + 5xx)', 'Active Connections', 'Bytes Sent', 'NGINX Up Status', 'Response Time (Avg)'],
            datasets: [{
              label: 'NGINX Metrics',
              data: [0, 0, 0, 0, 0, 0], // Initial empty values
              backgroundColor: [
                'rgba(75, 192, 192, 0.6)',
                'rgba(255, 99, 132, 0.6)',
                'rgba(255, 159, 64, 0.6)',
                'rgba(153, 102, 255, 0.6)',
                'rgba(255, 159, 64, 0.6)', // For Up Status
                'rgba(75, 192, 192, 0.6)' // For Response Time
              ],
              borderColor: [
                'rgba(75, 192, 192, 1)',
                'rgba(255, 99, 132, 1)',
                'rgba(255, 159, 64, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)',
                'rgba(75, 192, 192, 1)'
              ],
              borderWidth: 1
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        });

        setInterval(updateChart, 5000); // Update chart every 5 seconds
        updateChart(); // Initial chart load
      </script>
    </body>
    </html>